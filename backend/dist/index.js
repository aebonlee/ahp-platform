"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const helmet_1 = __importDefault(require("helmet"));
const morgan_1 = __importDefault(require("morgan"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const http_1 = require("http");
const migrate_1 = require("./database/migrate");
const connection_1 = require("./database/connection");
const workshopSync_1 = __importDefault(require("./services/workshopSync"));
const auth_1 = __importDefault(require("./routes/auth"));
const users_1 = __importDefault(require("./routes/users"));
const projects_1 = __importDefault(require("./routes/projects"));
const criteria_1 = __importDefault(require("./routes/criteria"));
const alternatives_1 = __importDefault(require("./routes/alternatives"));
const comparisons_1 = __importDefault(require("./routes/comparisons"));
const evaluate_1 = __importDefault(require("./routes/evaluate"));
const evaluators_1 = __importDefault(require("./routes/evaluators"));
const results_1 = __importDefault(require("./routes/results"));
const analysis_1 = __importDefault(require("./routes/analysis"));
const matrix_1 = __importDefault(require("./routes/matrix"));
const compute_1 = __importDefault(require("./routes/compute"));
const export_1 = __importDefault(require("./routes/export"));
const subscription_1 = __importDefault(require("./routes/subscription"));
const support_1 = __importDefault(require("./routes/support"));
const news_1 = __importDefault(require("./routes/news"));
const admin_1 = __importDefault(require("./routes/admin"));
const app = (0, express_1.default)();
const httpServer = (0, http_1.createServer)(app);
const PORT = process.env.PORT || 5000;
// Initialize WebSocket service (disabled for deployment)
const workshopSync = new workshopSync_1.default(httpServer);
console.log('üöÄ AHP Platform Backend v2.3.2 - Auth Routes Fix');
// Trust proxy for Render.com
app.set('trust proxy', 1);
app.use((0, helmet_1.default)({
    crossOriginEmbedderPolicy: false,
}));
// Enhanced CORS configuration for production
const allowedOrigins = [
    'http://localhost:3000',
    'https://aebonlee.github.io',
    'https://ahp-platform.onrender.com'
];
app.use((0, cors_1.default)({
    origin: function (origin, callback) {
        // Allow requests with no origin (mobile apps, etc.)
        if (!origin)
            return callback(null, true);
        if (allowedOrigins.indexOf(origin) !== -1 || process.env.CORS_ORIGIN === origin) {
            return callback(null, true);
        }
        // In development, allow any origin
        if (process.env.NODE_ENV !== 'production') {
            return callback(null, true);
        }
        callback(new Error('Not allowed by CORS'));
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use((0, morgan_1.default)(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));
app.use((0, cookie_parser_1.default)());
app.use(express_1.default.json({ limit: '10mb' }));
app.use(express_1.default.urlencoded({ extended: true, limit: '10mb' }));
app.get('/api/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});
// Manual migration endpoint for production debugging
app.post('/api/admin/migrate', async (req, res) => {
    try {
        console.log('üîß Manual migration requested...');
        await (0, migrate_1.runMigrations)();
        res.json({ success: true, message: 'Database migrations completed successfully' });
    }
    catch (error) {
        console.error('‚ùå Manual migration failed:', error);
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : String(error) });
    }
});
// Check users in database
app.get('/api/admin/users', async (req, res) => {
    try {
        const { query } = await Promise.resolve().then(() => __importStar(require('./database/connection')));
        const result = await query('SELECT id, email, first_name, last_name, role, is_active FROM users ORDER BY id');
        res.json({ users: result.rows });
    }
    catch (error) {
        res.status(500).json({ error: error instanceof Error ? error.message : String(error) });
    }
});
// Create test user endpoint
app.post('/api/admin/create-test-user', async (req, res) => {
    try {
        const { query } = await Promise.resolve().then(() => __importStar(require('./database/connection')));
        const bcrypt = require('bcrypt');
        const hashedPassword = await bcrypt.hash('test123', 10);
        await query(`
      INSERT INTO users (email, password_hash, first_name, last_name, role, is_active) 
      VALUES ($1, $2, $3, $4, $5, $6)
      ON CONFLICT (email) DO UPDATE SET 
        password_hash = EXCLUDED.password_hash,
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        role = EXCLUDED.role,
        is_active = EXCLUDED.is_active
    `, ['test@ahp.com', hashedPassword, 'Test', 'User', 'admin', true]);
        res.json({ success: true, message: 'Test user created: test@ahp.com / test123' });
    }
    catch (error) {
        res.status(500).json({ error: error instanceof Error ? error.message : String(error) });
    }
});
// Emergency phantom project cleanup endpoint (no auth required)
app.post('/api/emergency/cleanup-phantom-projects', async (req, res) => {
    try {
        const { confirm } = req.body;
        if (confirm !== 'CLEANUP_PHANTOM_PROJECTS_EMERGENCY') {
            return res.status(400).json({
                success: false,
                message: 'To confirm cleanup, send { "confirm": "CLEANUP_PHANTOM_PROJECTS_EMERGENCY" }'
            });
        }
        console.log('üö® Í∏¥Í∏â ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ¶¨ ÏãúÏûë...');
        const { query } = await Promise.resolve().then(() => __importStar(require('./database/connection')));
        // 1. ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù ÌôïÏù∏
        const projectsResult = await query(`
      SELECT p.id, p.title, p.name, p.description, p.status, p.admin_id, p.created_at,
             u.email as admin_email,
             (SELECT COUNT(*) FROM criteria WHERE project_id = p.id) as criteria_count,
             (SELECT COUNT(*) FROM alternatives WHERE project_id = p.id) as alternatives_count,
             (SELECT COUNT(*) FROM project_evaluators WHERE project_id = p.id) as evaluators_count
      FROM projects p
      LEFT JOIN users u ON p.admin_id = u.id
      ORDER BY p.created_at DESC
    `);
        console.log(`üìä ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ Ï¥ù Í∞úÏàò: ${projectsResult.rows.length}Í∞ú`);
        // 2. ÌóàÏàò/ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏãùÎ≥Ñ
        const phantomProjects = projectsResult.rows.filter((project) => {
            const title = (project.title || '').toLowerCase();
            const description = (project.description || '').toLowerCase();
            const name = (project.name || '').toLowerCase();
            // ÌÖåÏä§Ìä∏ Í¥ÄÎ†® ÌÇ§ÏõåÎìú
            const testKeywords = [
                'ÌÖåÏä§Ìä∏', 'test', 'sample', 'demo', 'example', 'prototype',
                'ai Í∞úÎ∞ú ÌôúÏö©', 'Ïä§ÎßàÌä∏Ìè∞ ÏÑ†ÌÉù', 'ÏßÅÏõê Ï±ÑÏö©', 'Ìà¨Ïûê Ìè¨Ìä∏Ìè¥Î¶¨Ïò§',
                'artificial', 'smartphone', 'employee', 'investment', 'Ï§ëÏöîÎèÑ Î∂ÑÏÑù'
            ];
            // Îπà ÌîÑÎ°úÏ†ùÌä∏ (criteria, alternatives, evaluators Î™®Îëê 0Ïù∏ Í≤ΩÏö∞)
            const isEmpty = project.criteria_count === 0 &&
                project.alternatives_count === 0 &&
                project.evaluators_count === 0;
            // ÌÇ§ÏõåÎìú Îß§Ïπ≠
            const hasTestKeyword = testKeywords.some(keyword => title.includes(keyword) || description.includes(keyword) || name.includes(keyword));
            // Í¥ÄÎ¶¨ÏûêÍ∞Ä test@ahp.comÏù∏ Í≤ΩÏö∞ (ÌÖåÏä§Ìä∏ Í≥ÑÏ†ï)
            const isTestAccount = project.admin_email === 'test@ahp.com';
            return hasTestKeyword || isEmpty || isTestAccount;
        });
        console.log(`üîç Î∞úÍ≤¨Îêú ÌóàÏàò/ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏: ${phantomProjects.length}Í∞ú`);
        console.log('ÏÇ≠Ï†ú ÎåÄÏÉÅ:', phantomProjects.map(p => `${p.id}: "${p.title}"`));
        if (phantomProjects.length === 0) {
            return res.json({
                success: true,
                message: 'ÏÇ≠Ï†úÌï† ÌóàÏàò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.',
                deleted_count: 0,
                remaining_count: projectsResult.rows.length
            });
        }
        // 3. ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú (CASCADEÎ°ú Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÏûêÎèô ÏÇ≠Ï†ú)
        console.log('üóëÔ∏è ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú Ï§ë...');
        const phantomProjectIds = phantomProjects.map((p) => p.id);
        // Î∞∞Ïπò ÏÇ≠Ï†ú
        await query('DELETE FROM projects WHERE id = ANY($1)', [phantomProjectIds]);
        // 4. Ï†ïÎ¶¨ ÌõÑ ÏÉÅÌÉú ÌôïÏù∏
        const finalResult = await query('SELECT COUNT(*) as count FROM projects');
        const remainingCount = parseInt(finalResult.rows[0].count);
        console.log(`‚úÖ ${phantomProjects.length}Í∞ú ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ ÏÇ≠Ï†ú ÏôÑÎ£å`);
        console.log(`üìä Ï†ïÎ¶¨ ÌõÑ ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏàò: ${remainingCount}Í∞ú`);
        res.json({
            success: true,
            message: `${phantomProjects.length}Í∞úÏùò ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`,
            deleted_count: phantomProjects.length,
            remaining_count: remainingCount,
            deleted_projects: phantomProjects.map((p) => ({
                id: p.id,
                title: p.title,
                admin_email: p.admin_email,
                criteria_count: p.criteria_count,
                alternatives_count: p.alternatives_count,
                evaluators_count: p.evaluators_count
            }))
        });
    }
    catch (error) {
        console.error('‚ùå Í∏¥Í∏â ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
        res.status(500).json({
            success: false,
            message: 'ÌóàÏàò ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: error.message
        });
    }
});
// Sample data creation endpoint for production
app.post('/api/admin/create-sample-data', async (req, res) => {
    try {
        console.log('üîß Creating sample data...');
        const { query } = await Promise.resolve().then(() => __importStar(require('./database/connection')));
        // Create sample news posts
        await query(`
      INSERT INTO news_posts (title, content, summary, author_name, category, featured, published, views) VALUES
      ($1, $2, $3, $4, $5, $6, $7, $8),
      ($9, $10, $11, $12, $13, $14, $15, $16),
      ($17, $18, $19, $20, $21, $22, $23, $24),
      ($25, $26, $27, $28, $29, $30, $31, $32),
      ($33, $34, $35, $36, $37, $38, $39, $40),
      ($41, $42, $43, $44, $45, $46, $47, $48)
      ON CONFLICT DO NOTHING
    `, [
            'AURI Ïä§ÌÉÄÏùº UI/UX Í∞úÌé∏ ÏôÑÎ£å - ÎçîÏö± ÏßÅÍ¥ÄÏ†ÅÏù∏ ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ï†úÍ≥µ',
            'ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞±ÏùÑ Î∞òÏòÅÌïòÏó¨ Ï†ÑÎ©¥Ï†ÅÏù∏ ÎîîÏûêÏù∏ Í∞úÏÑ†ÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§. ÎØ∏ÎãàÎ©ÄÌïòÍ≥† ÍπîÎÅîÌïú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú Ïó∞Íµ¨ Ìö®Ïú®ÏÑ±ÏùÑ ÎÜíÏòÄÏäµÎãàÎã§.',
            'ÏÉàÎ°úÏö¥ AURI Ïä§ÌÉÄÏùº ÎîîÏûêÏù∏ÏúºÎ°ú UI/UX Ï†ÑÎ©¥ Í∞úÌé∏',
            'Í∞úÎ∞úÌåÄ',
            'platform',
            true,
            true,
            324,
            'Íµ≠ÎÇ¥ Ï£ºÏöî ÎåÄÌïô 1,000+ ÎÖºÎ¨∏ÏóêÏÑú AHP Î∂ÑÏÑù ÎèÑÍµ¨ ÌôúÏö© Í≤ÄÏ¶ù',
            'ÏÑúÏö∏ÎåÄ, Ïó∞ÏÑ∏ÎåÄ, Í≥†Î†§ÎåÄ Îì± Ï£ºÏöî ÎåÄÌïôÏùò ÎÖºÎ¨∏ Ïó∞Íµ¨ÏóêÏÑú Ïö∞Î¶¨ ÌîåÎû´ÌèºÏùÑ ÌôúÏö©Ìïú AHP Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÎÜíÏùÄ Ïã†Î¢∞ÎèÑÎ•º Î≥¥ÏòÄÏäµÎãàÎã§.',
            'Ï£ºÏöî ÎåÄÌïô 1,000+ ÎÖºÎ¨∏ÏóêÏÑú AHP ÎèÑÍµ¨ ÌôúÏö© ÏÑ±Í≥º Í≤ÄÏ¶ù',
            'Ïó∞Íµ¨ÌåÄ',
            'research',
            true,
            true,
            567,
            'ÌïúÍµ≠ÏßÅÏóÖÎä•Î†•Í∞úÎ∞úÏÑºÌÑ∞ÏôÄ AHP Ïó∞Íµ¨ ÌîåÎû´Ìèº ÌååÌä∏ÎÑàÏã≠ Ï≤¥Í≤∞',
            'ÍµêÏú° Î∞è Ïó∞Íµ¨ Î∂ÑÏïºÏùò ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõêÏùÑ ÏúÑÌïú Ï†ÑÎûµÏ†Å ÌååÌä∏ÎÑàÏã≠ÏùÑ Ï≤¥Í≤∞ÌñàÏäµÎãàÎã§.',
            'ÍµêÏú° Ïó∞Íµ¨ Î∂ÑÏïº ÏùòÏÇ¨Í≤∞Ï†ï ÏßÄÏõê ÌååÌä∏ÎÑàÏã≠ Ï≤¥Í≤∞',
            'Í≤ΩÏòÅÏßÑ',
            'news',
            false,
            true,
            445,
            'ÏÇºÏÑ±Ï†ÑÏûê Ïó∞Íµ¨ÏÜå - AHPÎ•º ÌôúÏö©Ìïú Ïã†Ï†úÌíà Í∞úÎ∞ú Ïö∞ÏÑ†ÏàúÏúÑ Î∂ÑÏÑù ÏÇ¨Î°Ä',
            'ÏÇºÏÑ±Ï†ÑÏûê Ïó∞Íµ¨ÏÜåÏóêÏÑú Ïã†Ï†úÌíà Í∞úÎ∞ú ÌîÑÎ°úÏ†ùÌä∏Ïùò Ïö∞ÏÑ†ÏàúÏúÑÎ•º Í≤∞Ï†ïÌïòÍ∏∞ ÏúÑÌï¥ Ïö∞Î¶¨ ÌîåÎû´ÌèºÏùÑ ÌôúÏö©ÌñàÏäµÎãàÎã§.',
            'ÏÇºÏÑ±Ï†ÑÏûê Ïó∞Íµ¨ÏÜå Ïã†Ï†úÌíà Í∞úÎ∞ú Ïö∞ÏÑ†ÏàúÏúÑ Î∂ÑÏÑù ÏÑ±Í≥µ ÏÇ¨Î°Ä',
            'ÏÇ¨Î°ÄÏó∞Íµ¨ÌåÄ',
            'case',
            false,
            true,
            678,
            '2024ÎÖÑ ÌïòÎ∞òÍ∏∞ AHP Ïó∞Íµ¨ ÏõåÌÅ¨ÏÉµ Í∞úÏµú ÏïàÎÇ¥',
            '9Ïõî 15ÏùºÎ∂ÄÌÑ∞ 17ÏùºÍπåÏßÄ 3ÏùºÍ∞Ñ AHP Î∞©Î≤ïÎ°†Í≥º ÌîåÎû´Ìèº ÌôúÏö©Î≤ïÏùÑ Î∞∞Ïö∞Îäî ÏõåÌÅ¨ÏÉµÏùÑ Í∞úÏµúÌï©ÎãàÎã§.',
            'AHP Î∞©Î≤ïÎ°† Î∞è ÌîåÎû´Ìèº ÌôúÏö© ÏõåÌÅ¨ÏÉµ Í∞úÏµú',
            'ÍµêÏú°ÌåÄ',
            'event',
            false,
            true,
            234,
            'AI Í∏∞Î∞ò ÏùºÍ¥ÄÏÑ± Í∞úÏÑ† Í∏∞Îä• Î≤†ÌÉÄ Ï∂úÏãú',
            'Ïù∏Í≥µÏßÄÎä•ÏùÑ ÌôúÏö©ÌïòÏó¨ ÏåçÎåÄÎπÑÍµêÏùò ÏùºÍ¥ÄÏÑ±ÏùÑ ÏûêÎèôÏúºÎ°ú Í∞úÏÑ†Ìï¥Ï£ºÎäî ÏÉàÎ°úÏö¥ Í∏∞Îä•ÏùÑ Î≤†ÌÉÄ Î≤ÑÏ†ÑÏúºÎ°ú Ï∂úÏãúÌñàÏäµÎãàÎã§.',
            'AI Í∏∞Î∞ò ÏåçÎåÄÎπÑÍµê ÏùºÍ¥ÄÏÑ± ÏûêÎèô Í∞úÏÑ† Í∏∞Îä• Î≤†ÌÉÄ Ï∂úÏãú',
            'AIÍ∞úÎ∞úÌåÄ',
            'platform',
            false,
            true,
            512
        ]);
        // Create sample support posts
        await query(`
      INSERT INTO support_posts (title, content, author_name, author_email, category, status, views) VALUES
      ($1, $2, $3, $4, $5, $6, $7),
      ($8, $9, $10, $11, $12, $13, $14),
      ($15, $16, $17, $18, $19, $20, $21)
      ON CONFLICT DO NOTHING
    `, [
            'AHP Î∂ÑÏÑù Í≤∞Í≥ºÏùò ÏùºÍ¥ÄÏÑ± ÎπÑÏú®Ïù¥ 0.1ÏùÑ Ï¥àÍ≥ºÌï† Îïå Ìï¥Í≤∞ Î∞©Î≤ï',
            'ÏåçÎåÄÎπÑÍµêÎ•º ÏßÑÌñâÌñàÎäîÎç∞ ÏùºÍ¥ÄÏÑ± ÎπÑÏú®Ïù¥ 0.15Í∞Ä ÎÇòÏôîÏäµÎãàÎã§. Ïñ¥ÎñªÍ≤å Í∞úÏÑ†Ìï† Ïàò ÏûàÏùÑÍπåÏöî?',
            'Ïó∞Íµ¨ÏûêÍπÄ',
            'kim.researcher@university.ac.kr',
            'technical',
            'answered',
            127,
            'ÌèâÍ∞ÄÏûê Ï¥àÎåÄ Î©îÏùºÏù¥ Î∞úÏÜ°ÎêòÏßÄ ÏïäÎäî Î¨∏Ï†ú',
            'ÌîÑÎ°úÏ†ùÌä∏Ïóê ÌèâÍ∞ÄÏûêÎ•º Ï¥àÎåÄÌñàÎäîÎç∞ Î©îÏùºÏù¥ Î∞úÏÜ°ÎêòÏßÄ ÏïäÍ≥† ÏûàÏäµÎãàÎã§.',
            'ÍµêÏàòÎ∞ï',
            'park.professor@college.edu',
            'bug',
            'open',
            89,
            'Í∏∞Í¥Ä ÌîåÎûú Ìï†Ïù∏ Î¨∏Ïùò',
            'ÎåÄÌïôÍµêÏóêÏÑú Îã®Ï≤¥Î°ú Ïù¥Ïö©Ìï† ÏòàÏ†ïÏù∏Îç∞ Ìï†Ïù∏ ÌòúÌÉùÏù¥ ÏûàÎÇòÏöî?',
            'Í¥ÄÎ¶¨ÏûêÏù¥',
            'lee.admin@institution.org',
            'billing',
            'answered',
            156
        ]);
        console.log('‚úÖ Sample data created successfully');
        res.json({ success: true, message: 'Sample data created successfully' });
    }
    catch (error) {
        console.error('‚ùå Sample data creation failed:', error);
        res.status(500).json({ success: false, error: error instanceof Error ? error.message : String(error) });
    }
});
app.use('/api/auth', auth_1.default);
app.use('/api/users', users_1.default);
app.use('/api/projects', projects_1.default);
app.use('/api/criteria', criteria_1.default);
app.use('/api/alternatives', alternatives_1.default);
app.use('/api/comparisons', comparisons_1.default);
app.use('/api/evaluate', evaluate_1.default);
app.use('/api/evaluators', evaluators_1.default);
app.use('/api/results', results_1.default);
app.use('/api/analysis', analysis_1.default);
app.use('/api/matrix', matrix_1.default);
app.use('/api/compute', compute_1.default);
app.use('/api/export', export_1.default);
app.use('/api/subscription', subscription_1.default);
app.use('/api/support', support_1.default);
app.use('/api/news', news_1.default);
app.use('/api/admin', admin_1.default);
// API-only backend - no static file serving
app.get('/', (req, res) => {
    res.json({
        message: 'AHP Platform Backend API Server',
        version: '2.3.2',
        status: 'running',
        endpoints: {
            health: '/api/health',
            auth: '/api/auth/*',
            users: '/api/users/*',
            projects: '/api/projects/*'
        }
    });
});
// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal server error' });
});
// Workshop status API endpoints
app.get('/api/workshop/:projectId', (req, res) => {
    const workshopInfo = workshopSync.getWorkshopInfo(req.params.projectId);
    if (workshopInfo) {
        res.json(workshopInfo);
    }
    else {
        res.status(404).json({ error: 'Workshop not found' });
    }
});
app.get('/api/workshops', (req, res) => {
    const workshops = workshopSync.getAllWorkshops();
    res.json({ workshops });
});
// Start server
const server = httpServer.listen(PORT, async () => {
    console.log(`üöÄ AHP Backend Server started with PostgreSQL`);
    console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üåê Port: ${PORT}`);
    console.log(`üîó Health check: /api/health`);
    try {
        console.log('üîß Initializing PostgreSQL database...');
        await (0, connection_1.initDatabase)();
        console.log('‚úÖ PostgreSQL database initialized successfully');
    }
    catch (error) {
        console.error('‚ùå Failed to initialize database:', error);
        console.error('Error details:', error instanceof Error ? error.message : String(error));
        // Continue running the server even if database init fails
        console.log('‚ö†Ô∏è Server starting without database initialization');
    }
});
// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM received, shutting down gracefully...');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});
process.on('SIGINT', () => {
    console.log('üõë SIGINT received, shutting down gracefully...');
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});
